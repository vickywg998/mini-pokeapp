{"version":3,"sources":["Components/Random.js","assets/pokeball.png","Components/Pokedex.js","Components/Pokemon.js","App.js","index.js"],"names":["Random","useState","randomPokemon","setRandomPokemon","randomID","min","Math","ceil","max","floor","random","useEffect","axios","get","then","res","data","src","id","className","name","Pokedex","props","query","setQuery","search","setSearch","results","setResults","loading","setLoading","isError","setIsError","history","fetchData","a","fetch","response","json","Grid","centered","columns","Row","Pokeball","onSubmit","e","preventDefault","Input","type","placeholder","value","onChange","target","Button","height","weight","types","abilities","stats","undefined","Card","Content","Header","Image","wrapped","Meta","Description","map","info","ability","stat","onClick","push","loadPokemon","Pokemon","match","pokeID","params","pokemon","setPokemon","console","log","catch","error","sprites","front_default","back_default","back_shiny","front_shiny","Icon","size","Column","width","autoPlay","autoPlayInterval","style","Table","color","inverted","HeaderCell","Body","Cell","verticalAlign","Label","Statistic","Group","widths","Value","base_stat","App","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11d47fb5.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Random() {\n  const [randomPokemon, setRandomPokemon] = useState({});\n\n  const getRandomPokemon = () => {\n    axios.get(`https://pokeapi.co/api/v2/pokemon/${randomID()}`).then((res) => {\n      setRandomPokemon(res.data);\n    });\n  };\n\n  const randomID = () => {\n    const min = Math.ceil(1);\n    const max = Math.floor(151);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n\n  useEffect(() => {\n    getRandomPokemon();\n  }, []);\n\n  const randomPoke = () => {\n    return (\n      <div>\n        <img\n          src={\n            \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\" +\n            randomPokemon.id +\n            \".png\"\n          }\n          className=\"sprite\"\n        />\n        <p>{randomPokemon.name}</p>\n      </div>\n    );\n  };\n\n  return <div>{randomPoke()}</div>;\n}\n\nexport default Random;\n\n\n// Wanted to implement the following solutions to get a list of random results since the current one only gets one result.  \n// const getRandomPokemon = (k) => {\n//     axios.get(`https://pokeapi.co/api/v2/pokemon/?limit=151&offset=0`).then((res) => {\n//         var pokemons = JSON.parse(JSON.stringify(res.data))\n//         // console.log(\"pokemons\", pokemons)\n//         var rand_ids = getRandomInts(151, k);\n//         for (var i = 0; i < k; i++) {\n//             var id = rand_ids[i];\n//             console.log(pokemons.results[id].name, id);\n//         }\n//       setRandomPokemon(res.data);\n//       console.log(res.data, \"res data\")\n//     });\n//   };\n\n//   const getRandomInts = (max, k)=> {\n//     var res = [];\n//     while (res.length < k) {\n//       var number = Math.floor(Math.random() * Math.floor(max));\n//       if (!res.includes(number)) {\n//         res.push(number);\n//       }\n//     }\n//     return res;\n//   }","export default __webpack_public_path__ + \"static/media/pokeball.62d6b79b.png\";","import React, { useState, useEffect } from \"react\";\nimport Random from \"./Random\";\nimport { Card, Button, Image, Grid, Input } from \"semantic-ui-react\";\nimport Pokeball from \"../assets/pokeball.png\";\n\nfunction Pokedex(props) {\n  const [query, setQuery] = useState(\"\");\n  const [search, setSearch] = useState(\"\");\n  const [results, setResults] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const { history } = props;\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await fetch(\n          `https://pokeapi.co/api/v2/pokemon/${query}`\n        );\n        const data = await response.json();\n        setResults(data);\n        setIsError(false);\n      } catch (error) {\n        setIsError(true);\n      }\n      setLoading(false);\n    }\n    if (query !== \"mini-pokeapp\") {\n      fetchData();\n    }\n    fetchData();\n  }, [query]);\n\n  const loadPokemon = (results) => {\n    const { name, id, height, weight, types, abilities, stats } = results;\n    return (\n      <>\n        {name !== undefined && (\n          <Card className=\"pokedex-card\">\n            <Card.Content className=\"pokedex-card-content\">\n              <Card.Header>{name}</Card.Header>\n              <Image\n                src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`}\n                className=\"pokedex-card-image\"\n                wrapped\n              />\n              <Card.Meta>\n                Height: {height} Weight: {weight}\n              </Card.Meta>\n              <Card.Description>\n                <h5>Types:</h5>\n                {types.map((info) => {\n                  return <p key={info.type.name}> {`${info.type.name}`}</p>;\n                })}\n                <Card.Description>\n                  <h5>Abilities: </h5>\n                  {abilities.map((info) => {\n                    return (\n                      <p key={info.ability.name}> {`${info.ability.name}`}</p>\n                    );\n                  })}\n                </Card.Description>\n                <Card.Description>\n                  <h5> Base Stats:</h5>\n                  {stats.map((info) => {\n                    return <p key={info.stat.name}> {`${info.stat.name}`}</p>;\n                  })}\n                </Card.Description>\n              </Card.Description>\n            </Card.Content>\n            <Button onClick={() => history.push(`/mini-pokeapp/${id}`)}>\n              View more details\n            </Button>\n          </Card>\n        )}\n      </>\n    );\n  };\n\n  return (\n    <Grid centered columns={4}>\n      <Grid.Row>\n        <h1 className=\"pokedex-header\">Pokedex App</h1>\n      </Grid.Row>\n      <img src={Pokeball} className=\"pokedex-pokeball-sizing\" />\n      <Grid.Row>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            setQuery(search);\n          }}\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"search...\"\n            value={search}\n            onChange={(e) => setSearch(e.target.value)}\n          />\n          <Button type=\"submit\">Search</Button>\n        </form>\n      </Grid.Row>\n\n      <Grid.Row>\n        {isError && (\n          <div>Oops! Can't find this Pokemon, try searching another one?</div>\n        )}\n\n        {loading ? <h1>Loading...</h1> : loadPokemon(results)}\n      </Grid.Row>\n      <Grid.Row>\n        <h2> Random Pokemon of the Day!</h2>\n      </Grid.Row>\n      <Grid.Row>\n        <Random />\n      </Grid.Row>\n    </Grid>\n  );\n}\n\nexport default Pokedex;\n","import React, { useState, useEffect } from \"react\";\nimport { Grid, Table, Label, Icon, Statistic } from \"semantic-ui-react\";\nimport AliceCarousel from \"react-alice-carousel\";\nimport \"react-alice-carousel/lib/alice-carousel.css\";\nimport axios from \"axios\";\n\nfunction Pokemon(props) {\n  const { match, history } = props;\n  const { params } = match;\n  const { pokeID } = params;\n  const [pokemon, setPokemon] = useState(undefined);\n\n  useEffect(() => {\n    axios\n      .get(`https://pokeapi.co/api/v2/pokemon/${pokeID}/`)\n      .then((res) => {\n        const { data } = res;\n        setPokemon(data);\n        console.log(data);\n      })\n      .catch((error) => {\n        setPokemon(false);\n      });\n  }, [pokeID]);\n\n  const loadPokemon = (pokemon) => {\n    const {\n      name,\n      id,\n      height,\n      weight,\n      abilities,\n      sprites,\n      stats,\n      types,\n    } = pokemon;\n    const pokeImageUrl = `https://pokeres.bastionbot.org/images/pokemon/${id}.png`;\n    const pokeImageUrl2 = `https://pokeres.bastionbot.org/images/pokemon/${\n      id - 1\n    }.png`;\n    const pokeImageUrl3 = `https://pokeres.bastionbot.org/images/pokemon/${\n      id + 1\n    }.png`;\n    const { front_default, back_default, back_shiny, front_shiny } = sprites;\n\n    return (\n      <>\n        <Grid>\n          <Grid.Row centered>\n            <div className=\"pokemon-header\">\n              <img src={front_default} /> <h2>{`${name} #${id}`}</h2>\n            </div>\n          </Grid.Row>\n          <div className=\"pokemon-arrow\">\n            <Icon\n              name=\"arrow left\"\n              size=\"big\"\n              onClick={() => history.push(\"/mini-pokeapp/\")}\n            />\n          </div>\n          <Grid.Row centered>\n            <Grid.Column width={7}>\n              <AliceCarousel autoPlay autoPlayInterval=\"3000\">\n                <img\n                  style={{  height: \"300px\" }}\n                  src={front_default}\n                  className=\"pokemon-img-container\"\n                />\n                <img\n                  style={{  height: \"300px\" }}\n                  src={front_shiny}\n                  className=\"pokemon-img-container\"\n                />\n\n                <img\n                  style={{ height: \"300px\" }}\n                  src={back_default}\n                  className=\"pokemon-img-container\"\n                />\n                <img\n                  style={{ height: \"300px\" }}\n                  src={back_shiny}\n                  className=\"pokemon-img-container\"\n                />\n              </AliceCarousel>\n            </Grid.Column>\n            <Grid.Column width={6}>\n              <Table color=\"yellow\" key=\"yellow\" inverted>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell>Height</Table.HeaderCell>\n                    <Table.HeaderCell>Weight</Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n                  <Table.Row>\n                    <Table.Cell>{height}'</Table.Cell>\n                    <Table.Cell>{weight} lbs</Table.Cell>\n                  </Table.Row>\n                </Table.Body>\n\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell> Abilites:</Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n                  <Table.Row>\n                    <Table.Cell verticalAlign=\"top\">\n                      {abilities.map((info) => {\n                        return (\n                          <div key={info.ability.name}>\n                            {`${info.ability.name}`}\n                          </div>\n                        );\n                      })}\n                    </Table.Cell>\n                  </Table.Row>\n                </Table.Body>\n              </Table>\n              <h3 className=\"pokemon-types-header\">Types</h3>\n              {types.map((info) => {\n                return (\n                  <Label color=\"brown\" key={info.type.name} size=\"big\">\n                    {info.type.name}\n                  </Label>\n                );\n              })}\n            </Grid.Column>\n          </Grid.Row>\n\n          <Grid.Row centered className=\"pokemon-stats-container\">\n            <h3>Stats</h3>\n            <Statistic.Group inverted widths={14}>\n              {stats.map((info) => {\n                return (\n                  <Statistic key={info.stat.name}>\n                    <Statistic.Value>{info.base_stat}</Statistic.Value>\n                    <Statistic.Label>{info.stat.name}</Statistic.Label>\n                  </Statistic>\n                );\n              })}\n            </Statistic.Group>\n          </Grid.Row>\n        </Grid>\n      </>\n    );\n  };\n\n  return (\n    <>\n      {pokemon === undefined && <p>loading</p>}\n      {pokemon !== undefined && pokemon && loadPokemon(pokemon)}\n      {pokemon === false && <p>Sorry, there's no such Pokemon!</p>}\n    </>\n  );\n}\n\nexport default Pokemon;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.scss\"\nimport Pokedex from \"./Components/Pokedex\";\nimport Pokemon from \"./Components/Pokemon\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/mini-pokeapp\" component={Pokedex} />\n        <Route\n          exact\n          path=\"/mini-pokeapp/:pokeID\"\n          render={(props) => <Pokemon {...props} />}\n        />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}